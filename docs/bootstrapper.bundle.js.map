{"version":3,"file":"bootstrapper.bundle.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;ACNA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,oCAAoC;AACpF;AACA;AACA;AACA,8CAA8C,MAAM;AACpD;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iCAAiC;AACpD,0BAA0B,iCAAiC;AAC3D,yBAAyB,iCAAiC;AAC1D,yBAAyB,iCAAiC;AAC1D,yBAAyB,iCAAiC;AAC1D,yBAAyB,6BAA6B;AACtD,0BAA0B,6BAA6B;AACvD,yBAAyB,6BAA6B;AACtD,yBAAyB,6BAA6B;AACtD,yBAAyB,8BAA8B;AACvD,yBAAyB,8BAA8B;AACvD,yBAAyB;AACzB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,qCAAqC,EAAE,UAAU;AACzI;AACA;AACA,oEAAoE,iCAAiC,iBAAiB;AACtH,aAAa;AACb;AACA,KAAK;AACL;AACA,4DAA4D,YAAY;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oHAAoH,6BAA6B,+EAA+E;AAChO;AACA;AACA,oHAAoH,6BAA6B,6FAA6F;AAC9O;AACA;AACA,oHAAoH,6BAA6B,yBAAyB,wBAAwB,gDAAgD;AAClP;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,sCAAsC;AAC/E,yCAAyC,qCAAqC;AAC9E;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,yBAAyB;;;AAGjF;;AAEA;AACA;AACA;AACA,8CAA8C,gCAAgC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACS","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/make namespace object","webpack:///./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst __BOOTSTRAP_SCRIPT_PATH_KEY__ = '__BOOTSTRAP_SCRIPT_PATH__';\n(function () {\n    const originalOpen = XMLHttpRequest.prototype.open;\n    const originalSend = XMLHttpRequest.prototype.send;\n    XMLHttpRequest.prototype.open = function (method, url, async, user, password) {\n        this._method = method;\n        this._url = url;\n        console.log('XMLHttpRequest opened:', { method, url, async, user, password });\n        return originalOpen.apply(this, arguments);\n    };\n    XMLHttpRequest.prototype.send = function (body) {\n        console.log('XMLHttpRequest sent:', { body });\n        this.addEventListener('readystatechange', function () {\n            if (this.readyState === 4) { // Request is complete\n                console.log('XMLHttpRequest response received:', {\n                    method: this._method,\n                    url: this._url,\n                    status: this.status,\n                    response: this.responseText,\n                });\n            }\n        });\n        return originalSend.apply(this, arguments);\n    };\n})();\nconst loadBootstrapScript = (storage) => {\n    const bootstrap_script_path = storage.getItem(__BOOTSTRAP_SCRIPT_PATH_KEY__) || \"/remote.bundle.js\";\n    if (!bootstrap_script_path)\n        return;\n    const script = window.document.createElement('script');\n    script.src = bootstrap_script_path;\n    window.document.head.appendChild(script);\n};\nconst initWindow = () => {\n    // @ts-ignore\n    window.BrowserFS.install(window);\n    const defaultDirs = [\n        '/home',\n        '/home/user1',\n        '/home/user1/apps',\n        '/home/user1/tools',\n        '/home/user1/projects',\n        // '/home/user1/projects/Snake.html', // Specific project file (not a directory, but included for completeness)\n        // '/home/user1/projects/WebGL.html', // Specific project file (not a directory, but included for completeness)\n        // '/home/user1/projects/WebGL-Earth.html', // Specific project file (not a directory, but included for completeness)\n        '/usr',\n        '/usr/bin',\n        '/usr/lib',\n        '/usr/local',\n        '/bin',\n        // '/root',\n        // '/media',\n        // '/etc',\n        '/proc',\n        // '/lib',                        // Existing system directories\n        // '/mnt',\n        // '/opt',\n        // '/run',\n        '/srv',\n        '/sys',\n        '/tmp',\n        '/var',\n        '/var/log',\n        '/var/spool'\n    ];\n    // @ts-ignore\n    window.BrowserFS.configure({\n        fs: 'MountableFileSystem',\n        options: {\n            '/': { fs: 'LocalStorage', options: {} },\n            // '/home': { fs: 'LocalStorage', options: {} },\n            // '/bin': { fs: 'LocalStorage', options: {} },\n            // '/usr': { fs: 'LocalStorage', options: {} },\n            // '/srv': { fs: 'LocalStorage', options: {} },\n            // '/tmp': { fs: 'InMemory', options: {} },\n            // '/proc': { fs: 'InMemory', options: {} },\n            // '/var': { fs: 'InMemory', options: {} },\n            // '/sys': { fs: 'InMemory', options: {} },\n            // '/bin': { fs: 'IndexedDB', options: {} },\n            // '/usr': { fs: 'IndexedDB', options: {} },\n            // '/tmp': { fs: 'InMemory', options: {} } \n        }\n    }, (err) => __awaiter(void 0, void 0, void 0, function* () {\n        if (err) {\n            alert(err);\n        }\n        else {\n            const fs = window.require('fs');\n            // @ts-ignore\n            window.fs = fs;\n            // fs.mkdirSync('/c')\n            // fs.mkdirSync('/d')\n            // console.log(fs.readdirSync('/'))\n            defaultDirs.forEach(dir => {\n                if (!fs.existsSync(dir)) {\n                    fs.mkdirSync(dir);\n                }\n            });\n            const metaFilePath = '/meta.json';\n            const metaFileServerPath = '/public/mount/meta.json';\n            const isMetaFileExist = fs.existsSync(metaFilePath);\n            let defaultFiles = [];\n            if (isMetaFileExist) {\n                const metaFileRawContent = fs.readFileSync(metaFilePath);\n                defaultFiles = JSON.parse(metaFileRawContent);\n            }\n            const ignoreMetaReload = defaultFiles.find(item => item.path === metaFilePath && item.force_reload === false);\n            if (!ignoreMetaReload)\n                defaultFiles = yield (yield fetch(metaFileServerPath)).json();\n            defaultFiles.forEach((item) => __awaiter(void 0, void 0, void 0, function* () {\n                if (fs.existsSync(item.path) && !item.force_reload)\n                    return;\n                const path = item.file.startsWith('http') ? item.file : `/public/mount${item.file.startsWith('/') ? '' : '/'}${item.file}`;\n                const fileData = yield (yield fetch(path)).arrayBuffer();\n                fs.writeFileSync(item.path, Buffer.from(fileData));\n                // navigator.serviceWorker.controller?.postMessage({type: 'fs/file-added', payload: {file: item.path}});\n            }));\n        }\n    }));\n    if (navigator.serviceWorker) {\n        navigator.serviceWorker.register('/sw.bundle.js', { scope: '/' }).then(function (reg) {\n            if (reg.active)\n                console.log('serviceworker installed');\n            navigator.serviceWorker.addEventListener('message', event => {\n                // console.log(event.data)\n                var _a, _b, _c;\n                //@ts-ignore\n                const fs = window.fs;\n                if (!fs) {\n                    (_a = navigator.serviceWorker.controller) === null || _a === void 0 ? void 0 : _a.postMessage({ type: 'fs/reply', payload: { data: \"File system not mounted!\", request_id: event.data.payload.request_id } });\n                }\n                else if (fs.existsSync(event.data.payload.path)) {\n                    (_b = navigator.serviceWorker.controller) === null || _b === void 0 ? void 0 : _b.postMessage({ type: 'fs/reply', payload: { data: fs.readFileSync(event.data.payload.path), request_id: event.data.payload.request_id } });\n                }\n                else {\n                    (_c = navigator.serviceWorker.controller) === null || _c === void 0 ? void 0 : _c.postMessage({ type: 'fs/reply', payload: { data: `File not found! ${event.data.payload.path}`, request_id: event.data.payload.request_id } });\n                }\n            });\n        })\n            .catch(function (err) {\n            console.log('registration failed: ' + err);\n        });\n    }\n};\nconst channelRef = { current: null };\nconst initChannel = () => {\n    const channel = new BroadcastChannel('my_channel');\n    channel.onmessage = (event) => {\n        var _a;\n        const data = JSON.parse(event.data);\n        // console.log(data)\n        (_a = workerRef.current) === null || _a === void 0 ? void 0 : _a.postMessage(data);\n    };\n    channel.postMessage(JSON.stringify({ type: 'msg', data: 'New tab created' }));\n    channel.postMessage(JSON.stringify({ type: 'cmd', data: 'this.getuser()' }));\n    channelRef.current = channel;\n};\nconst workerRef = { current: null };\nconst initWorker = () => {\n    function startWorker() {\n        const workerCode = `\n            onmessage = function(event) {\n                const receivedMessage = event.data;\n                \n                if(receivedMessage.type === 'reply') console.log(receivedMessage)\n\n                if(receivedMessage.type === 'cmd') {\n                    const factory = new Function('a', 'b', 'return ' + receivedMessage.data)\n                    const context = {\n                        getuser: () => 'Admin'\n                    }\n                    const res = factory.apply(context, [10, 20])\n                    // console.log(res)\n                    // postMessage(res);\n                    const channel = new BroadcastChannel('my_channel')\n                    channel.postMessage(JSON.stringify({type: 'reply', data: res}))\n\n\n                }\n\n                // postMessage(receivedMessage);\n            }\n        `;\n        const blob = new Blob([workerCode], { type: \"application/javascript\" });\n        const workerUrl = URL.createObjectURL(blob);\n        const worker = new Worker(workerUrl);\n        worker.onmessage = function (event) {\n            console.log(event.data);\n        };\n        workerRef.current = worker;\n        return worker;\n    }\n    function stopWorker(worker) {\n        worker.terminate();\n    }\n    const worker = startWorker();\n};\nwindow.addEventListener('load', () => __awaiter(void 0, void 0, void 0, function* () {\n    initWindow();\n    // initWorker()\n    //   initChannel()\n    loadBootstrapScript(localStorage);\n}));\nexport {};\n"],"names":[],"sourceRoot":""}