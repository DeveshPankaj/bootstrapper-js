{"version":3,"file":"sw.bundle.js","mappings":";;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,gBAAgB;AAChB;AACA,QAAQ;AACR,CAAC;AACD;AACA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,QAAQ;AACR,CAAC,IAAI;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,WAAW,oCAAoC;AAC5G,yBAAyB;AACzB;AACA;AACA,qDAAqD,oCAAoC,0DAA0D;AACnJ,6BAA6B;AAC7B;AACA,oNAAoN,WAAW,+BAA+B;AAC9P;AACA,yBAAyB;AACzB,iEAAiE,UAAU,6BAA6B;AACxG,qBAAqB;AACrB;AACA,8HAA8H,WAAW,oCAAoC;AAC7K,aAAa;AACb,SAAS;AACT;AACA,yBAAyB;AACzB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack:///./src/sw.ts"],"sourcesContent":["\"use strict\";\nconst cacheName = 'MyFancyCacheName_v1';\nself.addEventListener('install', (event) => {\n    event.waitUntil(caches.open(cacheName));\n    // console.log(self.location.toString())\n    // caches.open(cacheName).then((cache) => {\n    //     cache.put('/123.js', \n    //         new Response(\"<h1>Hello!</h1>\", {\n    //             headers: {'Content-Type': 'text/html'}\n    //         })\n    //     )\n    // })\n});\nlet uid = 0;\nconst getUUID = () => {\n    return `${++uid}`;\n};\nconst clientRequests = new Map();\nconst getMIMEtype = (fileName) => {\n    if (fileName.endsWith('.png'))\n        return 'image/png';\n    if (fileName.endsWith('.jpeg'))\n        return 'image/jpeg';\n    if (fileName.endsWith('.html'))\n        return 'text/html';\n    if (fileName.endsWith('.js'))\n        return 'application/javascript';\n    if (fileName.endsWith('.json'))\n        return 'application/json';\n};\nself.addEventListener('message', event => {\n    // console.log(event.data)\n    if (event.data.type === 'fs/reply') {\n        const callback = clientRequests.get(event.data.payload.request_id);\n        callback === null || callback === void 0 ? void 0 : callback(event.data.payload.data);\n    }\n    // clients.matchAll().then(clients => {\n    //     clients.forEach(client => {\n    //         client.postMessage(event.data)\n    //     })\n    // })\n}, {});\nself.addEventListener('fetch', function (event) {\n    const url = event.request.url;\n    // console.log(url)\n    // if (url.endsWith('style.css')){\n    //    event.respondWith('your_file_response')\n    // }\n    // if(url.endsWith('.png')) {\n    //     event.respondWith(\n    //         fetch('https://play-lh.googleusercontent.com/1-hPxafOxdYpYZEOKzNIkSP43HXCNftVJVttoo4ucl7rsMASXW3Xr6GlXURCubE1tA=w3840-h2160-rw')\n    //     )\n    // }\n    // if(url.endsWith('.png')) {\n    //     event.respondWith(\n    //         fetch('/wp-4.jpeg')\n    //     )\n    // }\n    // if(url.endsWith('react-dom.js')) {\n    //     event.respondWith(\n    //         fetch('https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js')\n    //     )\n    // }\n    const _url = new URL(url);\n    // console.log(_url.pathname)\n    if (_url.pathname.startsWith('/cache')) {\n        event.respondWith(caches.open(cacheName).then((cache) => {\n            // Respond with the image from the cache or from the network\n            return cache.match(url).then((cachedResponse) => {\n                if (!cachedResponse) {\n                    console.log(_url.pathname);\n                    return new Promise((resolve, reject) => {\n                        const request_id = getUUID();\n                        clientRequests.set(request_id, (fileData) => {\n                            resolve(new Response(fileData, { headers: { 'Content-Type': getMIMEtype(url) } }));\n                        });\n                        clients.matchAll().then(clients => {\n                            clients.forEach(client => {\n                                client.postMessage({ type: 'fs/file-request', payload: { path: _url.pathname.slice('/cache'.length), request_id } });\n                            });\n                            if (clients.length === 0) {\n                                resolve(new Response(\"<h1>ERROR: no client available to serve the request. (if it's first time you are seeing this error, then try reloding app after saving your changes)</h1>\", { headers: { 'Content-Type': 'text/html' } }));\n                            }\n                        });\n                        // resolve(new Response(\"<h1>400</h1>\", {headers: {'Content-Type': 'text/html'}}))\n                    });\n                }\n                return cachedResponse !== null && cachedResponse !== void 0 ? cachedResponse : new Response(\"<h1>404</h1>\", { headers: { 'Content-Type': getMIMEtype(url) } });\n            });\n        })\n        // new Response(localStorage.getItem('__script_for_testing__')??\"\", {\n        //     headers: {'Content-Type': 'text/html'}\n        // })\n        );\n        // event.respondWith(\n        //     fetch('https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js')\n        // )\n    }\n});\n"],"names":[],"sourceRoot":""}